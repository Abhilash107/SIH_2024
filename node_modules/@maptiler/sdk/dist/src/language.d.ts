/**
 * Languages. Note that not all the languages of this list are available but the compatibility list may be expanded in the future.
 */
declare const Language: {
    /**
     * The visitor language mode concatenates the prefered language from the user settings and the "default name".
     * Note: The "default name" is equivalent to OSM's `{name}`, which can be the most recognized names a global
     * scale or the local name.
     * This mode is helpful in the context where a user needs to access both the local names and the names in their
     * own language, for instance when traveling abroad, where signs likely to be only available in the local language.
     */
    readonly VISITOR: "visitor";
    /**
     * The visitor language mode concatenates English and the "default name".
     * Note: The "default name" is equivalent to OSM's `{name}`, which can be the most recognized names a global
     * scale or the local name.
     * This mode is helpful in the context where a user needs to access both the local names and the names in their
     * own language, for instance when traveling abroad, where signs likely to be only available in the local language.
     */
    readonly VISITOR_ENGLISH: "visitor_en";
    /**
     * Language as the style is designed. Not that this is the default state and one
     * the language has been changed to another than `STYLE`, then it cannot be set back to `STYLE`.
     */
    readonly STYLE: "style";
    /**
     * AUTO mode uses the language of the browser
     */
    readonly AUTO: "auto";
    /**
     * STYLE is a custom flag to keep the language of the map as defined into the style.
     * If STYLE is set in the constructor, then further modification of the language
     * with `.setLanguage()` is not possible.
     */
    readonly STYLE_LOCK: "style_lock";
    /**
     * Default fallback languages that uses latin charaters
     */
    readonly LATIN: "name:latin";
    /**
     * Default fallback languages that uses non-latin charaters
     */
    readonly NON_LATIN: "name:nonlatin";
    /**
     * Labels are in their local language, when available
     */
    readonly LOCAL: "name";
    /**
     * International name
     */
    readonly INTERNATIONAL: "name_int";
    readonly ALBANIAN: "name:sq";
    readonly AMHARIC: "name:am";
    readonly ARABIC: "name:ar";
    readonly ARMENIAN: "name:hy";
    readonly AZERBAIJANI: "name:az";
    readonly BASQUE: "name:eu";
    readonly BELORUSSIAN: "name:be";
    readonly BENGALI: "name:bn";
    readonly BOSNIAN: "name:bs";
    readonly BRETON: "name:br";
    readonly BULGARIAN: "name:bg";
    readonly CATALAN: "name:ca";
    readonly CHINESE: "name:zh";
    readonly TRADITIONAL_CHINESE: "name:zh-Hant";
    readonly SIMPLIFIED_CHINESE: "name:zh-Hans";
    readonly CORSICAN: "name:co";
    readonly CROATIAN: "name:hr";
    readonly CZECH: "name:cs";
    readonly DANISH: "name:da";
    readonly DUTCH: "name:nl";
    readonly ENGLISH: "name:en";
    readonly ESPERANTO: "name:eo";
    readonly ESTONIAN: "name:et";
    readonly FINNISH: "name:fi";
    readonly FRENCH: "name:fr";
    readonly FRISIAN: "name:fy";
    readonly GEORGIAN: "name:ka";
    readonly GERMAN: "name:de";
    readonly GREEK: "name:el";
    readonly HEBREW: "name:he";
    readonly HINDI: "name:hi";
    readonly HUNGARIAN: "name:hu";
    readonly ICELANDIC: "name:is";
    readonly INDONESIAN: "name:id";
    readonly IRISH: "name:ga";
    readonly ITALIAN: "name:it";
    readonly JAPANESE: "name:ja";
    readonly JAPANESE_HIRAGANA: "name:ja-Hira";
    readonly JAPANESE_KANA: "name:ja_kana";
    readonly JAPANESE_LATIN: "name:ja_rm";
    readonly JAPANESE_2018: "name:ja-Latn";
    readonly KANNADA: "name:kn";
    readonly KAZAKH: "name:kk";
    readonly KOREAN: "name:ko";
    readonly KOREAN_LATIN: "name:ko-Latn";
    readonly KURDISH: "name:ku";
    readonly ROMAN_LATIN: "name:la";
    readonly LATVIAN: "name:lv";
    readonly LITHUANIAN: "name:lt";
    readonly LUXEMBOURGISH: "name:lb";
    readonly MACEDONIAN: "name:mk";
    readonly MALAYALAM: "name:ml";
    readonly MALTESE: "name:mt";
    readonly NORWEGIAN: "name:no";
    readonly OCCITAN: "name:oc";
    readonly PERSIAN: "name:fa";
    readonly POLISH: "name:pl";
    readonly PORTUGUESE: "name:pt";
    readonly PUNJABI: "name:pa";
    readonly WESTERN_PUNJABI: "name:pnb";
    readonly ROMANIAN: "name:ro";
    readonly ROMANSH: "name:rm";
    readonly RUSSIAN: "name:ru";
    readonly SCOTTISH_GAELIC: "name:gd";
    readonly SERBIAN_CYRILLIC: "name:sr";
    readonly SERBIAN_LATIN: "name:sr-Latn";
    readonly SLOVAK: "name:sk";
    readonly SLOVENE: "name:sl";
    readonly SPANISH: "name:es";
    readonly SWEDISH: "name:sv";
    readonly TAMIL: "name:ta";
    readonly TELUGU: "name:te";
    readonly THAI: "name:th";
    readonly TURKISH: "name:tr";
    readonly UKRAINIAN: "name:uk";
    readonly URDU: "name:ur";
    readonly VIETNAMIAN_LATIN: "name:vi";
    readonly WELSH: "name:cy";
};
declare function isLanguageSupported(lang: string): boolean;
/**
 * Type representing the key of the Language object
 */
type LanguageKey = keyof typeof Language;
type Values<T> = T[keyof T];
/**
 * Built-in languages values as strings
 */
type LanguageString = Values<typeof Language>;
declare function getBrowserLanguage(): LanguageString;
export { Language, type LanguageString, type LanguageKey, getBrowserLanguage, isLanguageSupported };
